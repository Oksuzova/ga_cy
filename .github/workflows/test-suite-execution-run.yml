name: Multiple Tests Run
permissions:
  contents: write
  pages: write

on:
  workflow_dispatch:
    inputs:
      config_file:
        description: Configuration file to use
        required: true
        default: 'default.config.js'
        type: choice
        options:
          - default.config.js
          - dev.config.js
          - prod.config.js
      execution_tests:
        description: Tests in cypress/tests/test-execution (directories or files separated by comma)
        required: false
        type: string
      suite_tests:
        description: Tests in cypress/tests/test-suites (directories or files separated by comma)
        required: false
        type: string

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Cypress
        uses: cypress-io/github-action@v5
        with:
          runTests: false

  create-job-matrix:
    runs-on: ubuntu-latest
    outputs:
      specs: ${{ steps.set-matrix.outputs.specs }}
    steps:
      - id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            const executionTests = '${{ github.event.inputs.execution_tests }}';
            const suiteTests = '${{ github.event.inputs.suite_tests }}';
            let specs = [];

            function processTests(inputValue, basePath) {
              if (!inputValue || inputValue.trim() === '') {
                return [];
              }

              const items = inputValue.split(',').map(item => item.trim());

              return items.map(item => {
                if (item.endsWith('.js') || item.endsWith('.cy.js')) {
                  if (item.startsWith('cypress/')) {
                    return item;
                  }
                  return `${basePath}/${item}`;
                }

                if (basePath.includes('test-execution')) {
                  const normalizedName = item.replace(/-/g, '_');
                  return `${basePath}/${item}/${normalizedName}_execution.js`;
                } else {
                  return `${basePath}/${item}/**/*.cy.js`;
                }
              });
            }

            const executionSpecs = processTests(executionTests, 'cypress/tests/test-execution');
            const suiteSpecs = processTests(suiteTests, 'cypress/tests/test-suites');

            specs = [...executionSpecs, ...suiteSpecs];

            console.log('Generated specs:', specs);
            core.setOutput('specs', JSON.stringify(specs));

  tests:
    runs-on: ubuntu-latest
    needs: [ install, create-job-matrix ]
    if: ${{ needs.create-job-matrix.outputs.specs != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        spec: ${{ fromJSON(needs.create-job-matrix.outputs.specs) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Display test path
        run: |
          echo "Running tests for spec: ${{ matrix.spec }}"

      - name: Setup Cypress
        uses: cypress-io/github-action@v5
        with:
          runTests: false

      - name: Run Cypress Tests
        uses: cypress-io/github-action@v5
        if: ${{ !contains(matrix.spec, 'test-execution') }}
        with:
          command: npx cypress run --spec ${{ matrix.spec }}
          browser: chrome
          install: false
        env:
          CONFIG_FILE: ${{ github.event.inputs.config_file }}

      - name: Run Node Tests (test-execution)
        if: ${{ contains(matrix.spec, 'test-execution') }}
        run: |
          CONFIG_FILE=${{ github.event.inputs.config_file }} node ${{ matrix.spec }}

      - name: Save test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.spec }}
          path: allure-results
          retention-days: 1

  report:
    runs-on: ubuntu-latest
    needs: tests
    if: needs.create-job-matrix.outputs.specs != '[]' && always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: allure-results

      - name: Prepare merged results
        run: |
          mkdir -p merged-results
          mkdir -p allure-results

          if [ "$(find allure-results -type f 2>/dev/null | wc -l)" -gt 0 ]; then
            find allure-results -type f -exec cp {} merged-results/ \;
          else
            echo "No test results found. Creating placeholder file."
            echo '{"name": "No test results", "status": "broken"}' > merged-results/no-results.json
          fi

          rm -rf allure-results
          mv merged-results allure-results
          ls -la allure-results

      - name: Load test report history
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: allure-results
          keep_reports: 20

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      - name: Add report link to job summary
        run: |
          echo "## :chart_with_upwards_trend: Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### :link: [View full Allure Report](https://oksuzova.github.io/ga_cy/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Report automatically updates after each test run. Last update: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "::notice title=Allure Report::Report available at: https://oksuzova.github.io/ga_cy/"